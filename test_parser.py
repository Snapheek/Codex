#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ Kwork.ru
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from core import KworkParser, parse_kwork_single_page
from utils import setup_logging, DEBUG_CONFIG, get_logger


async def test_parser_initialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        async with KworkParser(max_concurrent_requests=3) as parser:
            assert parser.session is not None
            assert parser.rate_limiter is not None
            assert parser.user_agent_rotator is not None
            
            stats = parser.get_stats()
            assert isinstance(stats, dict)
            assert "pages_parsed" in stats
            
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False


async def test_selector_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤...")
    
    try:
        from core.selectors import selector_matcher, get_selector
        from bs4 import BeautifulSoup
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π HTML
        test_html = """
        <div class="wants-list">
            <div class="want-card">
                <div class="wants-card__header-title">
                    <a href="/project/123">–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</a>
                </div>
                <div class="wants-card__price">50000 —Ä—É–±.</div>
                <div class="wants-card__description-text">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</div>
                <div class="wants-card__header-username">–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä</div>
            </div>
        </div>
        """
        
        soup = BeautifulSoup(test_html, 'html.parser')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        project_card_selector = selector_matcher.test_selector(soup, 'project_card')
        assert project_card_selector is not None
        
        project_title_selector = selector_matcher.test_selector(soup, 'project_title')
        assert project_title_selector is not None
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cards = soup.select(project_card_selector)
        assert len(cards) == 1
        
        title_elements = soup.select(project_title_selector)
        assert len(title_elements) == 1
        assert "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" in title_elements[0].get_text()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {e}")
        return False


async def test_data_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from bs4 import BeautifulSoup
        
        async with KworkParser() as parser:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞
            test_card_html = """
            <div class="want-card" data-want-id="12345">
                <div class="wants-card__header-title">
                    <a href="/project/12345">–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</a>
                </div>
                <div class="wants-card__price">75000 —Ä—É–±.</div>
                <div class="wants-card__description-text">
                    –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Python
                </div>
                <div class="wants-card__header-username">WebDeveloper123</div>
                <div class="wants-card__category">–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
                <div class="wants-card__responses">5 –æ—Ç–∫–ª–∏–∫–æ–≤</div>
                <div class="wants-card__views">120 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</div>
                <div class="wants-card__time">2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥</div>
            </div>
            """
            
            soup = BeautifulSoup(test_card_html, 'html.parser')
            card_element = soup.find('div', class_='want-card')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            project = parser.extract_project_data(card_element, "https://kwork.ru/projects")
            
            assert project is not None
            assert project.external_id == "12345"
            assert "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" in project.title
            assert project.price is not None
            assert project.price > 0
            assert project.author == "WebDeveloper123"
            assert project.category == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
            assert project.responses_count == 5
            assert project.views_count == 120
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project.title}")
            print(f"   –¶–µ–Ω–∞: {project.price} {project.currency}")
            print(f"   –ê–≤—Ç–æ—Ä: {project.author}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {project.category}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_price_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω"""
    print("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω...")
    
    try:
        async with KworkParser() as parser:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ü–µ–Ω
            test_cases = [
                ("50000 —Ä—É–±.", 50000.0, "FIXED"),
                ("–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è", None, "NEGOTIABLE"),
                ("–æ—Ç 10000 –¥–æ 20000", 10000.0, "RANGE"),
                ("1500 —Ä—É–±/—á–∞—Å", 1500.0, "HOURLY"),
                ("–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", None, "NEGOTIABLE"),
                ("25 000 —Ä—É–±.", 25000.0, "FIXED")
            ]
            
            for price_text, expected_price, expected_type in test_cases:
                price, price_type = parser._parse_price(price_text)
                
                if expected_price is None:
                    assert price is None
                else:
                    assert abs(price - expected_price) < 0.01
                
                assert price_type.value.upper() == expected_type
                
                print(f"   '{price_text}' -> {price} ({price_type.value})")
            
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω: {e}")
        return False


async def test_pagination_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    print("üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
    
    try:
        from bs4 import BeautifulSoup
        
        async with KworkParser() as parser:
            # –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            pagination_html = """
            <div class="pagination">
                <a href="?page=1" class="page-numbers">1</a>
                <span class="page-numbers current">2</span>
                <a href="?page=3" class="page-numbers">3</a>
                <a href="?page=4" class="page-numbers">4</a>
                <a href="?page=5" class="page-numbers">5</a>
                <a href="?page=3" class="next">–°–ª–µ–¥—É—é—â–∞—è</a>
            </div>
            <div class="wants-found-count">–ù–∞–π–¥–µ–Ω–æ: 87 –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
            """
            
            soup = BeautifulSoup(pagination_html, 'html.parser')
            pagination_info = parser._extract_pagination_info(soup)
            
            assert pagination_info["current_page"] == 2
            assert pagination_info["total_pages"] == 5
            assert pagination_info["has_next"] == True
            assert pagination_info["total_projects"] == 87
            
            print(f"‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination_info['current_page']} –∏–∑ {pagination_info['total_pages']}")
            print(f"   –°–ª–µ–¥—É—é—â–∞—è: {pagination_info['has_next']}")
            print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {pagination_info['total_projects']}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        return False


async def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        async with KworkParser() as parser:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ HTML
            invalid_html = "<html><body><div>–ù–µ–ø–æ–ª–Ω—ã–π HTML –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è"
            projects = await parser.parse_projects_from_page(invalid_html, "test://url")
            
            # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω–µ –ø–∞–¥–∞—Ç—å
            assert isinstance(projects, list)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø—É—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            result = parser._extract_text_safe(None, "default")
            assert result == "default"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω—ã
            price, price_type = parser._parse_price("–Ω–µ —Ü–µ–Ω–∞")
            assert price is None
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫: {e}")
        return False


async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏
        from utils import get_rate_limiter, get_user_agent_rotator
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        rate_limiter = get_rate_limiter("test")
        user_agent_rotator = get_user_agent_rotator()
        
        async with KworkParser(max_concurrent_requests=2) as parser:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            assert parser.rate_limiter is not None
            assert parser.user_agent_rotator is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = parser.get_stats()
            assert "rate_limiter" in stats
            assert "user_agent" in stats
            
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å mock –¥–∞–Ω–Ω—ã–º–∏
            mock_html = """
            <html>
            <body>
                <div class="wants-list">
                    <div class="want-card">
                        <div class="wants-card__header-title">
                            <a href="/project/999">Mock –ø—Ä–æ–µ–∫—Ç</a>
                        </div>
                        <div class="wants-card__description-text">Mock –æ–ø–∏—Å–∞–Ω–∏–µ</div>
                        <div class="wants-card__header-username">MockUser</div>
                        <div class="wants-card__price">1000 —Ä—É–±.</div>
                    </div>
                </div>
                <div class="pagination">
                    <span class="current">1</span>
                </div>
            </body>
            </html>
            """
            
            projects = await parser.parse_projects_from_page(mock_html, "test://mock")
            assert len(projects) == 1
            assert projects[0].title == "Mock –ø—Ä–æ–µ–∫—Ç"
            
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Kwork.ru...")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    setup_logging(DEBUG_CONFIG)
    logger = get_logger("parser_test")
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞", test_parser_initialization),
        ("–°–∏—Å—Ç–µ–º–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤", test_selector_system),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_data_extraction),
        ("–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω", test_price_parsing),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", test_pagination_parsing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", test_integration)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            result = await test_func()
            if result:
                passed += 1
            else:
                failed += 1
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed / (passed + failed) * 100:.1f}%")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä Kwork.ru –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 