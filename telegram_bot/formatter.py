"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ –∏ Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
"""

import re
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any

from core.models import Project, PriceType
from .templates import MessageTemplates


class TelegramMessageFormatter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    
    def __init__(self):
        self.templates = MessageTemplates()
    
    def _escape_markdown_v2(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        escaped_text = str(text)
        for char in escape_chars:
            escaped_text = escaped_text.replace(char, f'\\{char}')
        
        return escaped_text
    
    def _format_price(self, project: Project) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project: –û–±—ä–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
        """
        if project.price is None:
            if project.price_type == PriceType.NEGOTIABLE:
                return "üí¨ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            else:
                return "üí¨ –ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        formatted_price = f"{int(project.price):,}".replace(",", " ")
        currency_symbol = "‚ÇΩ" if project.currency == "RUB" else project.currency
        
        price_emoji = self._get_price_emoji(project.price)
        type_text = self._get_price_type_text(project.price_type)
        
        return f"{price_emoji} **{formatted_price} {currency_symbol}**{type_text}"
    
    def _get_price_emoji(self, price: Optional[float]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã"""
        if price is None:
            return "üí¨"
        elif price < 5000:
            return "üíµ"
        elif price < 20000:
            return "üí∞"
        elif price < 50000:
            return "üíé"
        else:
            return "üèÜ"
    
    def _get_price_type_text(self, price_type: PriceType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ —Ü–µ–Ω—ã"""
        type_mapping = {
            PriceType.FIXED: "",
            PriceType.HOURLY: " /—á–∞—Å",
            PriceType.RANGE: " \\(–¥–∏–∞–ø–∞–∑–æ–Ω\\)",
            PriceType.NEGOTIABLE: ""
        }
        return type_mapping.get(price_type, "")
    
    def _format_date(self, date_created: datetime) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            date_created: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        """
        now = datetime.utcnow()
        diff = now - date_created
        
        if diff.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
            minutes = int(diff.total_seconds() / 60)
            if minutes < 1:
                return "üìÖ –¢–æ–ª—å–∫–æ —á—Ç–æ"
            elif minutes == 1:
                return "üìÖ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"
            elif minutes < 5:
                return f"üìÖ {minutes} –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"
            else:
                return f"üìÖ {minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        
        elif diff.total_seconds() < 86400:  # –ú–µ–Ω—å—à–µ –¥–Ω—è
            hours = int(diff.total_seconds() / 3600)
            if hours == 1:
                return "üìÖ 1 —á–∞—Å –Ω–∞–∑–∞–¥"
            elif hours < 5:
                return f"üìÖ {hours} —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
            else:
                return f"üìÖ {hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        
        elif diff.days == 1:
            return "üìÖ –í—á–µ—Ä–∞"
        
        elif diff.days < 7:
            return f"üìÖ {diff.days} –¥–Ω—è –Ω–∞–∑–∞–¥"
        
        else:
            return f"üìÖ {date_created.strftime('%d.%m.%Y')}"
    
    def _format_stats(self, project: Project) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project: –û–±—ä–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        stats_parts = []
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
        if project.responses_count > 0:
            if project.responses_count == 1:
                stats_parts.append(f"üë• {project.responses_count} –æ—Ç–∫–ª–∏–∫")
            elif project.responses_count < 5:
                stats_parts.append(f"üë• {project.responses_count} –æ—Ç–∫–ª–∏–∫–∞")
            else:
                stats_parts.append(f"üë• {project.responses_count} –æ—Ç–∫–ª–∏–∫–æ–≤")
        else:
            stats_parts.append("üë• –ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        if project.views_count > 0:
            stats_parts.append(f"üëÄ {project.views_count}")
        
        return " ‚Ä¢ ".join(stats_parts) if stats_parts else ""
    
    def _format_description(self, description: str, max_length: int = 200) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        """
        if not description:
            return "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –û—á–∏—â–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        clean_desc = re.sub(r'\s+', ' ', description.strip())
        
        if len(clean_desc) <= max_length:
            return f"üìÑ {self._escape_markdown_v2(clean_desc)}"
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
        words = clean_desc.split()
        truncated = ""
        
        for word in words:
            if len(truncated + word + " ") <= max_length - 3:
                truncated += word + " "
            else:
                break
        
        truncated = truncated.strip()
        if truncated:
            return f"üìÑ {self._escape_markdown_v2(truncated)}\\.\\.\\."
        else:
            return f"üìÑ {self._escape_markdown_v2(clean_desc[:max_length-3])}\\.\\.\\."
    
    def _format_category_and_tags(self, project: Project) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–æ–≤
        
        Args:
            project: –û–±—ä–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç–µ–≥–∏
        """
        parts = []
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if project.category:
            parts.append(f"üè∑Ô∏è {self._escape_markdown_v2(project.category)}")
        
        # –¢–µ–≥–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3)
        if project.tags:
            visible_tags = project.tags[:3]
            tag_text = ", ".join(self._escape_markdown_v2(tag) for tag in visible_tags)
            
            if len(project.tags) > 3:
                tag_text += f" \\+{len(project.tags) - 3}"
            
            parts.append(f"üîñ {tag_text}")
        
        return " ‚Ä¢ ".join(parts) if parts else ""
    
    def _create_project_link(self, project: Project) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
        
        Args:
            project: –û–±—ä–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            str: Markdown —Å—Å—ã–ª–∫–∞
        """
        if project.link:
            return f"[üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç]({project.link})"
        else:
            return "üîó –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def format_single_project(self, project: Project) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project: –û–±—ä–µ–∫—Ç –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = self._escape_markdown_v2(project.title[:100])
        header = f"üÜï **–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ Kwork\\!**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        project_title = f"üìù **{title}**\n"
        price_info = f"{self._format_price(project)}\n"
        date_info = f"{self._format_date(project.date_created)}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self._format_stats(project)
        stats_line = f"{stats}\n" if stats else ""
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = self._format_description(project.description)
        description_line = f"{description}\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç–µ–≥–∏
        category_tags = self._format_category_and_tags(project)
        category_line = f"{category_tags}\n" if category_tags else ""
        
        # –ê–≤—Ç–æ—Ä
        author_line = ""
        if project.author:
            escaped_author = self._escape_markdown_v2(project.author)
            author_line = f"üë§ **–ê–≤—Ç–æ—Ä:** {escaped_author}\n"
        
        # –°—Å—ã–ª–∫–∞
        link = self._create_project_link(project)
        link_line = f"\n{link}"
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            header +
            project_title +
            price_info +
            date_info +
            stats_line +
            description_line +
            category_line +
            author_line +
            link_line
        )
        
        return message
    
    def format_grouped_projects(self, projects: List[Project]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
        
        Args:
            projects: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not projects:
            return ""
        
        if len(projects) == 1:
            return self.format_single_project(projects[0])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        count = len(projects)
        if count < 5:
            header = f"üÜï **{count} –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Kwork\\!**\n\n"
        else:
            header = f"üÜï **{count} –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Kwork\\!**\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –∫—Ä–∞—Ç–∫–æ
        project_lines = []
        
        for i, project in enumerate(projects, 1):
            title = self._escape_markdown_v2(project.title[:80])
            price = self._format_price(project).replace("**", "*")  # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É
            line = f"{i}\\. **{title}**\n"
            line += f"   {price}"
            
            if project.responses_count > 0:
                line += f" ‚Ä¢ üë• {project.responses_count}"
            
            if project.link:
                line += f" ‚Ä¢ [üîó –û—Ç–∫—Ä—ã—Ç—å]({project.link})"
            
            project_lines.append(line)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = header + "\n\n".join(project_lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_responses = sum(p.responses_count for p in projects)
        avg_price = sum(p.price for p in projects if p.price) / len([p for p in projects if p.price])
        
        stats_line = f"\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**"
        if total_responses > 0:
            stats_line += f" {total_responses} –æ—Ç–∫–ª–∏–∫–æ–≤"
        
        if avg_price:
            formatted_avg = f"{int(avg_price):,}".replace(",", " ")
            stats_line += f" ‚Ä¢ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {formatted_avg} ‚ÇΩ"
        
        message += stats_line
        
        return message
    
    def format_stats_message(
        self, 
        bot_stats: Dict[str, Any], 
        parsing_stats: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        
        Args:
            bot_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            parsing_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ Kwork**\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        if bot_stats:
            message += "ü§ñ **Telegram –±–æ—Ç:**\n"
            message += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_stats.get('messages_sent', 0)}\n"
            message += f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_stats.get('total_projects_sent', 0)}\n"
            message += f"‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {bot_stats.get('grouped_messages', 0)}\n"
            
            if bot_stats.get('messages_failed', 0) > 0:
                message += f"‚Ä¢ –û—à–∏–±–æ–∫: {bot_stats['messages_failed']}\n"
            
            uptime = bot_stats.get('uptime', 0)
            if uptime > 0:
                hours = int(uptime / 3600)
                minutes = int((uptime % 3600) / 60)
                message += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º\n"
            
            message += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if parsing_stats:
            message += "üîç **–ü–∞—Ä—Å–µ—Ä:**\n"
            message += f"‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {parsing_stats.get('pages_parsed', 0)}\n"
            message += f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {parsing_stats.get('projects_found', 0)}\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {parsing_stats.get('projects_new', 0)}\n"
            
            if parsing_stats.get('errors', 0) > 0:
                message += f"‚Ä¢ –û—à–∏–±–æ–∫: {parsing_stats['errors']}\n"
            
            avg_time = parsing_stats.get('avg_page_time', 0)
            if avg_time > 0:
                message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {avg_time:.1f}—Å\n"
        
        # –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        current_time = datetime.now().strftime("%d\\.%m\\.%Y %H:%M")
        message += f"\nüïê –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {current_time}"
        
        return message
    
    def format_error_message(self, error_message: str, error_details: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_details: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "üö® **–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ Kwork**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        escaped_error = self._escape_markdown_v2(error_message)
        message += f"‚ùå {escaped_error}\n"
        
        # –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        if error_details:
            escaped_details = self._escape_markdown_v2(error_details[:500])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            message += f"\nüìù **–î–µ—Ç–∞–ª–∏:**\n`{escaped_details}`\n"
        
        # –í—Ä–µ–º—è –æ—à–∏–±–∫–∏
        current_time = datetime.now().strftime("%d\\.%m\\.%Y %H:%M:%S")
        message += f"\nüïê –í—Ä–µ–º—è: {current_time}"
        
        return message
    
    def format_startup_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        current_time = datetime.now().strftime("%d\\.%m\\.%Y %H:%M:%S")
        
        message = "üöÄ **–ü–∞—Ä—Å–µ—Ä Kwork –∑–∞–ø—É—â–µ–Ω\\!**\n\n"
        message += "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n"
        message += "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω\n"
        message += "üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n\n"
        message += f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time}"
        
        return message
    
    def format_shutdown_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        current_time = datetime.now().strftime("%d\\.%m\\.%Y %H:%M:%S")
        
        message = "üõë **–ü–∞—Ä—Å–µ—Ä Kwork –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
        message += "üì¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
        message += "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
        message += f"üïê –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {current_time}"
        
        return message 