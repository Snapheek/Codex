#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from core.models import Project, ProjectStatus, PriceType
from telegram_bot import TelegramNotifier, TelegramMessageFormatter, MessageTemplates
from utils import setup_logging, DEBUG_CONFIG, get_logger


def create_test_projects():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    projects = []
    
    # –ü—Ä–æ–µ–∫—Ç 1 - –æ–±—ã—á–Ω—ã–π
    project1 = Project(
        external_id="test_1",
        title="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ Django",
        description="–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω–æ–π, –æ–ø–ª–∞—Ç–æ–π –∏ –∞–¥–º–∏–Ω–∫–æ–π.",
        price=75000.0,
        price_type=PriceType.FIXED,
        currency="RUB",
        author="WebDeveloper123",
        category="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        date_created=datetime.utcnow() - timedelta(minutes=15),
        responses_count=3,
        views_count=45,
        link="https://kwork.ru/projects/12345",
        tags=["Django", "Python", "Web"],
        skills_required=["Django", "PostgreSQL", "Bootstrap"],
        status=ProjectStatus.NEW
    )
    projects.append(project1)
    
    # –ü—Ä–æ–µ–∫—Ç 2 - –¥–æ—Ä–æ–≥–æ–π
    project2 = Project(
        external_id="test_2", 
        title="–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è iOS/Android",
        description="–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.",
        price=250000.0,
        price_type=PriceType.FIXED,
        currency="RUB",
        author="MobileDevPro",
        category="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        date_created=datetime.utcnow() - timedelta(minutes=5),
        responses_count=8,
        views_count=120,
        link="https://kwork.ru/projects/12346",
        tags=["React Native", "Mobile", "iOS", "Android"],
        skills_required=["React Native", "Firebase", "Maps API"],
        status=ProjectStatus.NEW
    )
    projects.append(project2)
    
    # –ü—Ä–æ–µ–∫—Ç 3 - –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è —Ü–µ–Ω–∞
    project3 = Project(
        external_id="test_3",
        title="–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è",
        description="–ò—â—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ —Å—Ñ–µ—Ä–µ IT.",
        price=None,
        price_type=PriceType.NEGOTIABLE,
        currency="RUB",
        author="StartupFounder",
        category="–î–∏–∑–∞–π–Ω",
        date_created=datetime.utcnow() - timedelta(hours=2),
        responses_count=15,
        views_count=200,
        link="https://kwork.ru/projects/12347",
        tags=["–õ–æ–≥–æ—Ç–∏–ø", "–ë—Ä–µ–Ω–¥–∏–Ω–≥", "–§–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å"],
        skills_required=["Adobe Illustrator", "Photoshop"],
        status=ProjectStatus.NEW
    )
    projects.append(project3)
    
    # –ü—Ä–æ–µ–∫—Ç 4 - –ø–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
    project4 = Project(
        external_id="test_4",
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã –≤ Google Ads",
        description="–ù—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.",
        price=3500.0,
        price_type=PriceType.HOURLY,
        currency="RUB",
        author="MarketingAgency",
        category="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        date_created=datetime.utcnow() - timedelta(minutes=30),
        responses_count=1,
        views_count=25,
        link="https://kwork.ru/projects/12348",
        tags=["Google Ads", "PPC", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞"],
        skills_required=["Google Ads", "Analytics"],
        status=ProjectStatus.NEW
    )
    projects.append(project4)
    
    # –ü—Ä–æ–µ–∫—Ç 5 - –Ω–µ–¥–∞–≤–Ω–∏–π
    project5 = Project(
        external_id="test_5",
        title="–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è –±–ª–æ–≥–∞",
        description="–¢—Ä–µ–±—É—é—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ SEO-—Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–≥–∞ IT-–∫–æ–º–ø–∞–Ω–∏–∏.",
        price=15000.0,
        price_type=PriceType.RANGE,
        currency="RUB",
        author="ContentManager",
        category="–¢–µ–∫—Å—Ç—ã",
        date_created=datetime.utcnow() - timedelta(minutes=2),
        responses_count=0,
        views_count=8,
        link="https://kwork.ru/projects/12349",
        tags=["SEO", "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥", "IT-—Ç–µ–º–∞—Ç–∏–∫–∞"],
        skills_required=["SEO", "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥"],
        status=ProjectStatus.NEW
    )
    projects.append(project5)
    
    return projects


async def test_formatter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        formatter = TelegramMessageFormatter()
        projects = create_test_projects()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        single_message = formatter.format_single_project(projects[0])
        assert len(single_message) > 0
        assert "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞" in single_message
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        group_message = formatter.format_grouped_projects(projects[:3])
        assert len(group_message) > 0
        assert "3 –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞" in group_message
        print("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_stats = {"messages_sent": 10, "total_projects_sent": 25, "uptime": 3600}
        parsing_stats = {"pages_parsed": 5, "projects_found": 25, "errors": 0}
        stats_message = formatter.format_stats_message(bot_stats, parsing_stats)
        assert len(stats_message) > 0
        assert "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã" in stats_message
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        error_message = formatter.format_error_message("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞", "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")
        assert len(error_message) > 0
        assert "–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ" in error_message
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–µ: {e}")
        return False


async def test_templates():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        from telegram_bot.templates import get_category_emoji, get_price_template, get_responses_template
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        emoji = get_category_emoji("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        assert emoji == "üíª"
        
        emoji = get_category_emoji("–î–∏–∑–∞–π–Ω")
        assert emoji == "üé®"
        
        emoji = get_category_emoji("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        assert emoji == "üìã"
        print("‚úÖ –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã —Ü–µ–Ω
        template = get_price_template(3000)
        assert "üíµ" in template
        
        template = get_price_template(15000)
        assert "üí∞" in template
        
        template = get_price_template(100000)
        assert "üèÜ" in template
        print("‚úÖ –®–∞–±–ª–æ–Ω—ã —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –æ—Ç–∫–ª–∏–∫–æ–≤
        template = get_responses_template(0)
        assert "–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤" in template
        
        template = get_responses_template(1)
        assert "1 –æ—Ç–∫–ª–∏–∫" in template
        
        template = get_responses_template(15)
        assert "–ø–æ–ø—É–ª—è—Ä–Ω–æ" in template
        print("‚úÖ –®–∞–±–ª–æ–Ω—ã –æ—Ç–∫–ª–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö: {e}")
        return False


async def test_bot_initialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —Ñ–µ–π–∫–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        bot = TelegramNotifier("123456:TEST_TOKEN_FOR_TESTING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        assert bot.bot_token == "123456:TEST_TOKEN_FOR_TESTING"
        assert bot.formatter is not None
        assert bot.templates is not None
        assert bot.rate_limiter is not None
        assert bot.max_projects_per_message == 5
        assert bot.group_timeout == 30
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = bot.get_stats()
        assert isinstance(stats, dict)
        assert "messages_sent" in stats
        assert "uptime" in stats
        assert "rate_limiter" in stats
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


async def test_grouping_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏...")
    
    try:
        bot = TelegramNotifier("123456:TEST_TOKEN_FOR_TESTING")
        projects = create_test_projects()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pending –ø—Ä–æ–µ–∫—Ç—ã –ø—É—Å—Ç—ã–µ –≤ –Ω–∞—á–∞–ª–µ
        assert len(bot._pending_projects) == 0
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É (–º–æ–∫–∞–µ–º chat_id)
        chat_id = "test_chat"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞)
        bot._pending_projects[chat_id] = []
        bot._pending_projects[chat_id].extend(projects[:3])
        
        assert len(bot._pending_projects[chat_id]) == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = bot.get_stats()
        assert stats["pending_groups"] == 1
        assert stats["pending_projects"] == 3
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")
        return False


async def test_markdown_escaping():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown"""
    print("üî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown...")
    
    try:
        formatter = TelegramMessageFormatter()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        test_strings = [
            "–¢–µ–∫—Å—Ç —Å_–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º_–∏*–∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏*",
            "–°—Å—ã–ª–∫–∞: https://example.com/test?param=1&other=2",
            "–¶–µ–Ω–∞: 10,000-15,000 —Ä—É–±. (50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)",
            "Email: test@example.com –∏ —Ç–µ–ª–µ—Ñ–æ–Ω: +7(900)123-45-67",
            "[–°–∫–æ–±–∫–∏] –∏ (–∫—Ä—É–≥–ª—ã–µ) —Å–∏–º–≤–æ–ª—ã",
            "–í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫! –ò —Ç–æ—á–∫–∞."
        ]
        
        for test_string in test_strings:
            escaped = formatter._escape_markdown_v2(test_string)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
            assert "\\_" in escaped or "_" not in test_string
            assert "\\*" in escaped or "*" not in test_string
            assert "\\!" in escaped or "!" not in test_string
            assert "\\." in escaped or "." not in test_string
            
        print("‚úÖ –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}")
        return False


async def test_message_length():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)"""
    print("üìè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        formatter = TelegramMessageFormatter()
        projects = create_test_projects()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        long_project = Project(
            external_id="test_long",
            title="–ü—Ä–æ–µ–∫—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º " * 10,
            description="–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ " * 50,  # ~1500 —Å–∏–º–≤–æ–ª–æ–≤
            price=50000.0,
            price_type=PriceType.FIXED,
            currency="RUB",
            author="TestAuthor",
            category="–¢–µ—Å—Ç",
            date_created=datetime.utcnow(),
            responses_count=5,
            views_count=100,
            link="https://example.com",
            status=ProjectStatus.NEW
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        single_message = formatter.format_single_project(long_project)
        assert len(single_message) < 4096  # –õ–∏–º–∏—Ç Telegram
        print(f"   –î–ª–∏–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(single_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        group_message = formatter.format_grouped_projects([long_project] * 5)
        assert len(group_message) < 4096  # –õ–∏–º–∏—Ç Telegram
        print(f"   –î–ª–∏–Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(group_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("‚úÖ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False


async def test_real_telegram_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram API (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)"""
    print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
    
    try:
        bot = TelegramNotifier(bot_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        is_connected = await bot.verify_connection()
        
        if is_connected:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ Kwork.ru"
            success = await bot._send_message_with_retry(chat_id, test_message)
            
            if success:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            return False
        
        await bot.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    setup_logging(DEBUG_CONFIG)
    logger = get_logger("telegram_test")
    
    tests = [
        ("–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π", test_formatter),
        ("–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", test_templates),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", test_bot_initialization),
        ("–õ–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", test_grouping_logic),
        ("–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown", test_markdown_escaping),
        ("–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", test_message_length),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API", test_real_telegram_api)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            result = await test_func()
            if result:
                passed += 1
            else:
                failed += 1
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed / (passed + failed) * 100:.1f}%")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        print("\nüìñ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("export TELEGRAM_BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        print("export TELEGRAM_CHAT_ID='–≤–∞—à_chat_id'")
        print("python test_telegram.py")
        
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 